dim(diamonds)
library("ggplot2")
data("diamonds")
ggplot(diamonds, aes(x = carat, y = price, color = clarity)) + geom_point()
ggplot(diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth()
ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + geom_smooth()
ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + ggtitle("Nhu cc")
ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + ggtitle("Nhu cc") + xlim(0, 3)
ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + ggtitle("Nhu cc") + scale_y_log10()
ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + ggtitle("Nhu cc") + scale_y_log10() + scale_x_log10()
ggplot(diamonds, aes(x = price)) + geom_histogram()
ggplot(diamonds, aes(x = price)) + geom_histogram() + facet_wrap(~clarity, scale = 'free_y')
rm(diamonds)
data("WorldPhones")
View(WorldPhones)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
WorldPhones.m = melt(WorldPhones)
View(WorldPhones.m)
colNames(WorldPhones.m) = c("Year", "Continent", "Phones")
colNames(WorldPhones.m) <- c("Year", "Continent", "Phones")
colnames(WorldPhones.m) <- c("Year", "Continent", "Phones")
View(WorldPhones.m)
swirl()
library(swirl)
swirl()
View(iris)
iris$Species
iris[3,]
head(iris, 5)
rm(list1, list2, iris)
library(ggplot2)
data(diamonds)
View(diamonds)
ggplot(diamonds, x = z, y = price) + geom_point()
ggplot(diamonds, aes(x = z, y = price)) + geom_point()
ggplot(diamonds, aes(x = z, y = price, color = cut)) + geom_point()
ggplot(diamonds, aes(x = z, y = price, color = cut)) + geom_point() + geom_smooth()
data(Orange)
View(Orange)
ggplot(Orange, aes(x = age, y = circumference)) + geom_point()
ggplot(Orange, aes(x = age, y = circumference, color = tree)) + geom_point()
ggplot(Orange, aes(x = age, y = circumference, color = tree)) + geom_point()
ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + geom_point()
ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + geom_point() + geom_smooth(se = F)
ggplot(diamonds, aes(x = z, y = price)) + geom_point() + facet_wrap(~cut)
ggplot(diamonds, aes(x = z, y = price)) + geom_point() + facet_wrap(color~cut)
ggplot(diamonds, aes(x = z, y = price)) + geom_point() + facet_wrap(cut~color)
ggplot(diamonds, aes(x = z, y = price)) + geom_point() + facet_grid(cut~color)
ggplot(diamonds, aes(x = z, y = price)) + geom_point() + ggtitle("My Graph") + ylim(0, 10000)
ggplot(Orange, aes(x = age, y = circumference)) + geom_point() + facet_wrap(~Tree)
ggplot(diamonds, aes(x = weight)) + geom_histogram()
ggplot(diamonds, aes(x = carat)) + geom_histogram()
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = .5)
ggplot(diamonds, aes(x = carat)) + geom_density()
ggplot(diamonds, aes(x = carat)) + geom_density() + facet_wrap(~clarity)
ggplot(diamonds, aes(x = carat, color = clarity)) + geom_density()
data(iris)
View(iris)
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_boxplot()
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin()
qplot(diamonds, carat, price)
qplot(diamonds$carat, diamonds$price)
library(reshape2)
data(french_fries)
View(french_fries)
ggplot(french_fries, aes(x=buttery, y = treatment)) + geom_boxplot()
ggplot(french_fries, aes(x=buttery)) + geom_boxplot()
ggplot(french_fries, aes(x=buttery, y = treatment)) + geom_boxplot()
french_fries.m = melt(french_fries)
ggplot(french_fries, aes(x=treatment, y = buttery)) + geom_boxplot()
french_fries.m = melt(french_fries)
?melt
french_fries.m = melt(french_fries, id = c(time, treatment, subject))
french_fries.m = melt(french_fries, id = c("time", "treatment", "subject"))
info()
french_fries.m = melt(french_fries, id = c("row.names","time", "treatment", "subject"))
french_fries.m = melt(french_fries, id = c("time", "treatment", "subject", "rep"))
View(french_fries.m)
ggplot(french_fries.m, aes(x=treatments, y = value)) + geom_boxplot() + facet_wrap(~variable)
ggplot(french_fries.m, aes(x=treatment, y = value)) + geom_boxplot() + facet_wrap(~variable)
View(iris)
p <- ggplot(iris, aes(x=Petal.Length, y=Petal.Width)) + geom_point()
ggsave("petalsize.jpeg")
data(mtcars)
View(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x=am, y=mpg)) +geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg)) +geom_boxplot()
ggplot(mtcars, aes(x=am, y=mpg)) +geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg)) +geom_boxplot()
mtcars$am
factor(mtcars$am)
tt = t.test(mpg~am, mtcars)
tt
names(tt)
cor.test(mtcars$mpg, mtcars$wt)
data(mtcars)
View(mtcars)
head(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x = factor(am), y = mpg)) + geom_boxplot()
t.test(mpg~am, data = mtcars)
tt = t.test(mpg~am, data = mtcars)
tt$conf.int
rm(tt)
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
cor.test(mtcars$mpg, mtcars$wt)
fit <- lm(mpg~wt, mtcars)
summary(fit)
mfit <- lm(mpg~wt + disp + cyl, mtcars)
mfit
summary(mfit)
rm(ls= list())
rm(list= ls
)
rm(list= ls())
library(swirl)
swirl()
data(CO2)
View(CO2)
ggplot(CO2, aes(x = factor(Treatment), y = uptake)) + geom_boxplot()
ggplot(CO2, aes(x = factor(Treatment), y = uptake)) + geom_boxplot()
ggplot(CO2, aes(x = Treatment, y = uptake)) + geom_boxplot()
t.test(uptake~Treatment, CO2)
0.003107
ggplot(CO2, aes(x = Type, y = uptake)) + geom_boxplot()
t.test(uptake~Type, CO2)
tt = t.test(uptake~Type, CO2)
tt$p.value
tt$conf.int
tt$conf.int[2]
tt$conf.int[1]
8.839475
rm(CO2, tt)
data(iris)
View(iris)
ggplot(iris, aes(x= Petal.Length, y= Petal.Width)) + geom_boxplot()
ggplot(iris, aes(x= Petal.Length, y= Petal.Width)) + geom_point()
ct = cor.test(iris$Petal.Length, iris$Petal.Width)
ct
ct$estimate
ct$p.value
ct$conf.int
View(CO2)
ggplot(CO2, aes(x= conc, y= uptake)) + geom_point()
fit = lm(uptake~conc, CO2)
summary(fit)
0.017731
2.91e-06
ggplot(CO2, aes(x= conc, y= uptake)) + geom_point() + scale_x_log10()
fit = lm(uptake~log(conc), CO2)
lfit = lm(uptake~log(conc), CO2)
lfit = lm(uptake ~ log(conc), CO2)
rm(fit, lfit)
lfit = lm(uptake ~ log(conc), CO2)
lfit = lm(uptake ~ log(conc), CO2)
info()
rm(ct, fit, lfit)
rm(fit)
lfit = lm(uptake ~ log(conc), CO2)
info()
skip()
lfit = lm(uptake ~ log(conc), data=CO2)
lfit = lm(uptake ~ log(conc), data=CO2)
info()
skip()
info()
main()
View(CO2)
ggplot(CO2, aes(x=conc, y=uptake)) + geom_point() + scale_x_log10()
ggplot(CO2, aes(x=conc, y=uptake, color=Type)) + geom_point() + scale_x_log10()
mfit = lm(uptake ~ log(conc) + Type)
mfit = lm(uptake ~ log(conc) + Type, data= CO2)
summary(mfit)
ggplot(CO2, aes(x=conc, y=uptake, color=Type, shape=Treatment)) + geom_point() + scale_x_log10()
mfit2 = lm(uptake ~ log(conc) + Type + Treatment, data= CO2)
summary(mfit2)
1.11e-08
lfit = lm(uptake ~ log(conc), data=CO2)
summary(lfit)
install.packages("RMySQL")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "e59d24c4b89cc747216c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
rm(list=ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, strinsgAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydg)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
print(cran)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "IN" | country == "US")
filter(cran, size>100500, r_os == "linux-gnu")
in.na(c(3,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_gb = size_mb/2^10)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinc(country), avg_bytes = mean(size))
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
source('/var/folders/zf/70bcw_rd5k7b80xs93lc17kw0000gn/T//RtmpgP1h1V/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
tail(pack_sum)
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
arrange(top_counts, count)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
infro()
info()
skip()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquality, facets = .~factor(Month))
library(lattice)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquality, facets = .~factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth") + facets(airquality, factor(Month))
?multiplot
multiplot
LAMBDA <- 0.2
n <- 40
nosim <- 1000
means <- NULL
set.seed(24)
for (i in 1:nosim) means = c(means, mean(rexp(n, LAMBDA)))
var(means)
sd(means)
sqrt(var(means))
(5/sqrt(1000))
(5/sqrt(1000))^2
25/40
LAMBDA <- 0.2
means <- NULL
set.seed(24)
for (i in 1:1000) means = c(means, mean(rexp(40, LAMBDA)))
exps <- rexp(1000, LAMBDA)
set.seed(24)
exps <- rexp(1000, LAMBDA)
qqnorm(exps)
qqnorm(exps)
qqline(exps)
qqnorm(means)
qqline(means)
tg <- ToothGrowth
head(tg)
str(tg)
View(tg)
?t.test
dt <- ToothGrowth
rm(tg)
library(dplyr)
g1 <- filter(dt, dose == 0.5 && supp == "VC")
g2 <- filter(dt, dose == 0.5 && supp == "OJ")
g1
g1 <- filter(dt, dose == "0.5" && supp == "VC")
g2 <- filter(dt, dose == "0.5" && supp == "OJ")
g1
g1 <- filter(dt, dose == "0.5" && supp == "VC")
str(dt)
g1 <- filter(dt, dose == 0.5, supp == "VC")
g2 <- filter(dt, dose == 0.5, supp == "OJ")
g1
t.test(g1, g2)
runApp()
shiny::runApp('Desktop/Study/Data Products/Project')
runApp()
shiny::runApp('Desktop/Study/Data Products/Project')
shiny::runApp('Desktop/Study/Data Products/Project')
shiny::runApp('Desktop/Study/Data Products/Project')
shiny::runApp('Desktop/Study/Data Products/Project')
shiny::runApp('Desktop/Study/Data Products/Project')
shiny::runApp('Desktop/Study/Data Products/Project')
shiny::runApp('Desktop/Study/Data Products/Project')
